import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.absoluteOffset
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.*
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.Divider
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Alignment.Companion.CenterHorizontally
import androidx.compose.ui.Alignment.Companion.CenterVertically
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.practicecompose0723.ui.theme.PracticeCompose0723Theme
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            PracticeCompose0723Theme {
                val scrollState = rememberScrollState()
                Box(
                    modifier = Modifier
                        .size(height = 680.dp, width = 300.dp)
                        .background(Color.Black)
                ) {
                    NewTextImage()
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                    ) {
                        Column(
                            modifier = Modifier
                                .size(height = 600.dp, width = 300.dp)
                                .verticalScroll(scrollState)
                        ) {
                            TopSetting()
                            Image(
                                painterResource(id = R.drawable.darkmode),
                                contentDescription = ""
                            )
                            MenuText(input = "üó®Ô∏è   Ïä§Î†àÎìú")
                            MenuText(input = "üìù   Ï∫îÎ≤ÑÏä§")
                            MenuText(input = "üì®   Ï¥àÏïà Î∞è Ï†ÑÏÜ°Îê®")
                            MenuText(input = "üîñ   ÎÇòÏ§ëÏóê")
                            Divider()
                            ChannelToggle(
                                "Ï±ÑÎÑê                                               -",
                                "Ï±ÑÎÑê                                               +",
                                "Ï±ÑÎÑê"
                            )
                            Divider()
                            ChannelToggle(
                                "Îã§Ïù¥Î†âÌä∏ Î©îÏÑ∏ÏßÄ                                 -",
                                "Îã§Ïù¥Î†âÌä∏ Î©îÏÑ∏ÏßÄ                                 +",
                                "Îã§Ïù¥Î†âÌä∏ Î©îÏÑ∏ÏßÄ"
                            )
                        }
                        Divider()
                        BottomMenu()
                    }
                }
            }
        }
    }
}
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TopSetting() {
    var outtext by remember { mutableStateOf("") }
    Box() {
        Column() {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.size(height = 50.dp, width = 300.dp)
            ) {
                Image(
                    painterResource(id = R.drawable.ic_launcher_foreground),
                    contentDescription = ""
                )
                Text(
                    text = "KDT_Ïù∏ÌÖî Ïù∏Í≥µÏßÄÎä• Ïù∏Ïû¨ÏñëÏÑ±",
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis,
                    fontSize = 40.sp,
                    color = Color.White
                )
            }
            Divider(Modifier.padding(5.dp))
            OutlinedTextField(
                placeholder = {
                    Text(
                        text = "Îã§ÏùåÏúºÎ°ú Ïù¥Îèô...",
                        fontSize = 10.sp,
                        color = Color.White,
                        fontStyle = FontStyle.Italic,
                        modifier = Modifier
                            .fillMaxHeight()
                            .wrapContentHeight(align = Alignment.CenterVertically)
                    )
                },
                value = outtext,
                onValueChange = { outtext = it },
                modifier = Modifier
                    .padding(10.dp)
                    .size(height = 44.dp, width = 250.dp)
                    .align(CenterHorizontally)
            )
        }
    }
}
@Composable
fun NewTextImage() {
    val context = LocalContext.current
    Box(modifier = Modifier.absoluteOffset(225.dp, 520.dp)) {
        Text(
            text = "üìÉ",
            fontSize = 50.sp,
            modifier = Modifier
                .padding(3.dp)
                .clickable {
                    val intent = Intent(context, AfterClickPage::class.java)
                    intent.putExtra("Click", "ÏÉàÍ∏Ä ÏûëÏÑ±")
                    context.startActivity(intent)
                }
        )
    }
}
@Composable
fun MenuText(input: String) {
    val context = LocalContext.current
    Text(
        text = input,
        color = Color.Gray,
        modifier = Modifier
            .padding(3.dp)
            .clickable {
                val intent = Intent(context, AfterClickPage::class.java)
                intent.putExtra("Click", input)
                context.startActivity(intent)
            })
    Spacer(modifier = Modifier.size(3.dp))
}
@Composable
fun ChannelToggle(unfoldedtext: String, foldedtext: String, menuName: String) {
    var isChannelExpanded by remember { mutableStateOf(true) }
    Column(
        modifier = Modifier.fillMaxWidth()
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                if (isChannelExpanded) unfoldedtext else foldedtext,
                color = Color.Gray,
                modifier = Modifier.padding(3.dp)
            )
            IconButton(onClick = { isChannelExpanded = !isChannelExpanded }) {
                Icon(
                    imageVector = if (isChannelExpanded) Icons.Default.ArrowForward else Icons.Default.ArrowDropDown,
                    contentDescription = "Toggle Channel",
                    tint = Color.Gray
                )
            }
        }
        @Composable
        fun Channel() {
            if (isChannelExpanded) {
                MenuText(input = "üçî   _Í≥µÏßÄÏÇ¨Ìï≠")
                MenuText(input = "üçî   _ÏßàÎ¨∏ÏûàÏñ¥Ïöî")
                MenuText(input = "üçî   _aiÍ≥ºÏ†ï")
                MenuText(input = "üçî   _appÍ≥ºÏ†ï")
                MenuText(input = "üçî   Ïò§ÌîÑÎçîÎ†àÏΩîÎìú")
                MenuText(input = "üçî   ÏùºÏ†ïÏïåÎ¶º")
                MenuText(input = "üçî   Ï†êÏã¨ÌõÑÍ∏∞-Í≥µÏú†Ìï¥Ïöî")
                MenuText(input = "üçî   ÌåÄ1-interstellar")
                MenuText(input = "‚ûï   Ï±ÑÎÑêÏ∂îÍ∞Ä")
            }
        }
        @Composable
        fun DirectMessage() {
            if (isChannelExpanded) {
                MenuText(input = "‚ò†   Ïù¥ÌôçÏßÑ")
                MenuText(input = "‚ò†   Ïù¥ÌôçÏßÑ")
                MenuText(input = "‚ò†   Ïù¥ÌôçÏßÑ")
                MenuText(input = "‚ò†   Ïù¥ÌôçÏßÑ")
                MenuText(input = "‚ò†   Ïù¥ÌôçÏßÑ")
                MenuText(input = "‚ò†   Ïù¥ÌôçÏßÑ")
                MenuText(input = "‚ò†   Ïù¥ÌôçÏßÑ")
                MenuText(input = "‚ò†   Ïù¥ÌôçÏßÑ")
            }
        }
        when (menuName) {
            "Ï±ÑÎÑê" -> Channel()
            "Îã§Ïù¥Î†âÌä∏ Î©îÏÑ∏ÏßÄ" -> DirectMessage()
        }
    }
}
@Composable
private fun BottomMenu() {
    Box(
        modifier = Modifier.size(height = 150.dp, width = 300.dp),
        contentAlignment = Alignment.Center
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color.Black),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = CenterVertically
        ) {
            BottomText(image = "üè°", text = "Ìôà")
            BottomText(image = "\uD83D\uDCAC", text = "DM")
            BottomText(image = "¬©Ô∏è", text = "Î©òÏÖò")
            BottomText(image = "\uD83D\uDD0D", text = "Í≤ÄÏÉâ")
            BottomText(image = "\uD83D\uDE0A", text = "ÎÇò")
        }
    }
}
@Composable
fun BottomText(image: String, text: String) {
    val context = LocalContext.current
    Column(horizontalAlignment = Alignment.CenterHorizontally) {
        Text(
            text = image,
            modifier = Modifier
                .weight(1f)
                .clickable {
                    val intent = Intent(context, AfterClickPage::class.java)
                    intent.putExtra("Click", image)
                    context.startActivity(intent)
                },
            textAlign = TextAlign.Center,
            fontSize = 40.sp
        )
        Text(
            text = text, textAlign = TextAlign.Center, fontSize = 12.sp, color = Color.Gray
        )
    }
}
